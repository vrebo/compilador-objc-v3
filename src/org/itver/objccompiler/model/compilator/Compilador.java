/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package org.itver.objccompiler.model.compilator;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;

public class Compilador implements CompiladorConstants {

    private static final StringBuilder logAnalisisLexico;
    private static final StringBuilder logAnalisisSintactico;
    private static final StringBuilder logAnalisisSemantico;

    public static int contadorErrores;

    static {
        logAnalisisLexico = new StringBuilder();
        logAnalisisSintactico = new StringBuilder();
        logAnalisisSemantico = new StringBuilder();
        contadorErrores = 0;
    }

    public static void main(String args[]) throws FileNotFoundException {
        Compilador compilador = new Compilador(new File("res/Codigo02.mm"));
        try {
            compilador.unidadCompilacion();
        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private File codigo;

    public Compilador(File codigo) throws FileNotFoundException {
        this(new FileReader(codigo));
        this.codigo = codigo;
    }

    public void imprimeLogs() {
        imprimeAnalisisLexico();
        imprimeAnalisisSintactico();
        imprimeAnalisisSemantico();
    }

    private void imprimeAnalisisLexico() {
        imprimeArchivo("res/analsis_lexico_" + codigo.getName() + ".txt",
                Compilador.getLogAnalisisLexico().toString());
    }

    private void imprimeAnalisisSintactico() {
        imprimeArchivo("res/analsis_sintactico_" + codigo.getName() + ".txt",
                Compilador.getLogAnalisisSintactico().toString());
    }

    private void imprimeAnalisisSemantico() {
        imprimeArchivo("res/analsis_semantico_" + codigo.getName() + ".txt",
                Compilador.getLogAnalisisSemantico().toString());
    }

    private void imprimeArchivo(String nombreArchivo, String contenido) {
        PrintWriter pw;
        try {
            pw = new PrintWriter(nombreArchivo);
            pw.println(contenido);
            pw.flush();
        } catch (FileNotFoundException ex) {
            System.err.println("No se pudo encontrar el archivo");
        }
    }

    public static void registraLogLexico(String mensaje) {
        //System.out.println(mensaje);
        logAnalisisLexico.append(mensaje).append("\u005cn");
    }

    public static void registraLogSintactico(String mensaje) {
        //System.out.println(mensaje);
        logAnalisisSintactico.append(mensaje).append("\u005cn");
    }

    public static void registraLogSemantico(String mensaje) {
        contadorErrores++;
        logAnalisisSemantico.append(mensaje).append("\u005cn");
    }

    public static void registraErrorSintactico(String mensaje, Token token) {
        contadorErrores++;
        StringBuilder sb = new StringBuilder(mensaje)
                .append("Linea: ").append(token.beginLine)
                .append(" Columna: ").append(token.beginColumn);
        registraLogSintactico(sb.toString());
    }

    void skipTo(int kind) {
        Token tok = getToken(0);
        while (tok.kind != EOF && tok.kind != kind) {
            tok = getNextToken();
            System.out.println("Saltanto token: " + tok.image);
        }
    }

    void skipTo(String st) {
        Token tok = getToken(0);
        System.out.println("Token saltado " + tok.image);
        while (tok.kind != EOF && !tok.image.equals(st)) {
            tok = getNextToken();
        }
    }

    void skipTo(int[] left, int[] right) {
        Token prev = getToken(0);
        Token next = getToken(1);
        boolean flag = false;
        if (prev.kind == EOF || next.kind == EOF) {
            flag = true;
        }
        for (int i = 0; i < left.length; i++) {
            if (prev.kind == left[i]) {
                flag = true;
            }
        }
        for (int i = 0; i < right.length; i++) {
            if (next.kind == right[i]) {
                flag = true;
            }
        }

        while (!flag) {
            System.err.println("Token saltado: " + prev);
            getNextToken();
            prev = getToken(0);
            next = getToken(1);
            if (prev.kind == EOF || next.kind == EOF) {
                flag = true;
            }
            for (int i = 0; i < left.length; i++) {
                if (prev.kind == left[i]) {
                    flag = true;
                }
            }
            for (int i = 0; i < right.length; i++) {
                if (next.kind == right[i]) {
                    flag = true;
                }
            }
        }
    }

    public static StringBuilder getLogAnalisisLexico() {
        return logAnalisisLexico;
    }

    public static StringBuilder getLogAnalisisSintactico() {
        return logAnalisisSintactico;
    }

    public static StringBuilder getLogAnalisisSemantico() {
        return logAnalisisSemantico;
    }

    public static void initLogs() {
        logAnalisisLexico.setLength(0);
        logAnalisisSintactico.setLength(0);
        logAnalisisSemantico.setLength(0);
    }

//ÁREA DE GRAMÁTICAS
    final public void unidadCompilacion() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IMPORTACION:
        ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            importacion();
        }
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case VOID:
        ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            if (jj_2_1(3)) {
                declVariableGlobal();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BYTE:
                    case SHORT:
                    case ENTERO:
                    case LONG:
                    case DOUBLE:
                    case FLOTANTE:
                    case BOOLEANO:
                    case CARACTER:
                    case NSSTRING:
                    case ARREGLO:
                    case VOID:
                        declMetodo();
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        }
        jj_consume_token(0);
        imprimeLogs();
    }

    final public void importacion() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {
            IMPORTACION, VOID, BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE,
            DOUBLE, CARACTER, NSSTRING, ARREGLO
        };
        try {
            jj_consume_token(IMPORTACION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMILLA_DOBLE:
                    jj_consume_token(COMILLA_DOBLE);
                    jj_consume_token(ID);
                    jj_consume_token(COMILLA_DOBLE);
                    break;
                case 80:
                    jj_consume_token(80);
                    jj_consume_token(ID);
                    jj_consume_token(81);
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            System.out.println("G: Gram\u00e1tica de directiva de importaci\u00f3n");
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en directiva de importaci\u00f3n ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

    /*  Gramática
     *   DECL_VAR_GLOB   →       TIPO DECL_VAR
     *                       |   TIPO DECL_VAR "," DECL_VAR_GLOB     */
    final public void declVariableGlobal() throws ParseException {
        int[] tokensIzquierda = {
            DELIMITADOR_INSTRUCCION
        };
        int[] tokensDerecha = {
            DELIMITADOR_INSTRUCCION, VOID, BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE,
            DOUBLE, CARACTER, NSSTRING, ARREGLO
        };
        try {
            tipo();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORCHETE_APERTURA:
                    jj_consume_token(CORCHETE_APERTURA);
                    jj_consume_token(CORCHETE_CERRADURA);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    ;
            }
            jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORCHETE_APERTURA:
                    jj_consume_token(CORCHETE_APERTURA);
                    jj_consume_token(CORCHETE_CERRADURA);
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_ASIG:
                    jj_consume_token(OP_ASIG);
                    expresion();
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en declaraci\u00f3n de variable global ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_3;
            }
            try {
                jj_consume_token(COMA);
                jj_consume_token(ID);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case OP_ASIG:
                        jj_consume_token(OP_ASIG);
                        expresion();
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        ;
                }
            } catch (ParseException ex) {
                registraErrorSintactico(
                        "Error de sintaxis en declaraci\u00f3n de variable global ", ex.currentToken.next);
                skipTo(tokensIzquierda, tokensDerecha);
            }
        }
        try {
            jj_consume_token(DELIMITADOR_INSTRUCCION);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en declaraci\u00f3n de variable global ", ex.currentToken.next);
        }
        System.out.println("Gram\u00e1tica de declaraci\u00f3n de variable global");
    }

    /*  Gramática
     *   DECL_METODO →       TIPO_RESULTADO ID PARAMETROS BLOQUE
     *                   |   TIPO_RESULTADO ID PARAMETROS ";"        */
    final public void declMetodo() throws ParseException {
        int[] tokensIzquierda = {
            DELIMITADOR_INSTRUCCION
        };
        int[] tokensDerecha = {
            VOID, BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE,
            DOUBLE, CARACTER, NSSTRING, ARREGLO
        };
        try {
            tipoResultado();
            jj_consume_token(ID);
            parametros();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LLAVE_APERTURA:
                    bloque();
                    break;
                case DELIMITADOR_INSTRUCCION:
                    jj_consume_token(DELIMITADOR_INSTRUCCION);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            System.out.println("Gram\u00e1tica de declaraci\u00f3n m\u00e9todo");
        } catch (ParseException ex) {
            System.out.println(ex);
            registraErrorSintactico(
                    "Error de sintaxis en declaraci\u00f3n de m\u00e9todo ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

    /*  Gramática
     *   PARAMETROS  →       "(" A ")"
     *   A           →       EPSILON
     *                   |   B
     *   B           →       PARAMETRO
     *                   |   PARAMETRO "," B     */
    final public void parametros() throws ParseException {
        int[] tokensIzquierda = {
            DELIMITADOR_INSTRUCCION, PARENTESIS_CERRADURA, LLAVE_CERRADURA
        };
        int[] tokensDerecha = {
            LLAVE_APERTURA
        };
        try {
            jj_consume_token(PARENTESIS_APERTURA);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case CONST:
                    parametro();
                    label_4:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case COMA:
            ;
                                break;
                            default:
                                jj_la1[10] = jj_gen;
                                break label_4;
                        }
                        jj_consume_token(COMA);
                        parametro();
                    }
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    ;
            }
            jj_consume_token(PARENTESIS_CERRADURA);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en declaraci\u00f3n de m\u00e9todo ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

    /*  Gramática
     *   PARAMETRO   →       TIPO ID     */
    final public void parametro() throws ParseException {
        int[] tokensIzquierda = {
            DELIMITADOR_INSTRUCCION
        };
        int[] tokensDerecha = {
            COMA, PARENTESIS_CERRADURA
        };
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONST:
                    jj_consume_token(CONST);
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    ;
            }
            tipo();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORCHETE_APERTURA:
                    jj_consume_token(CORCHETE_APERTURA);
                    jj_consume_token(CORCHETE_CERRADURA);
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
            jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CORCHETE_APERTURA:
                    jj_consume_token(CORCHETE_APERTURA);
                    jj_consume_token(CORCHETE_CERRADURA);
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    ;
            }
        } catch (ParseException ex) {
            System.err.println("Error de sintaxis en declaraci\u00f3n de m\u00e9todo parametro " + ex.currentToken.next.beginLine + " " + ex.currentToken.next.beginColumn);
            registraErrorSintactico(
                    "Error de sintaxis en declaraci\u00f3n de m\u00e9todo ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

    /*  Gramática
     *   TIPO    →   "byte" | "short" | "int" | "long" | "double"
     *               | "float" | "BOOL" | "char" | "NSString" | "NSSArray"   */
    final public void tipo() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BYTE:
                jj_consume_token(BYTE);
                break;
            case SHORT:
                jj_consume_token(SHORT);
                break;
            case ENTERO:
                jj_consume_token(ENTERO);
                break;
            case LONG:
                jj_consume_token(LONG);
                break;
            case DOUBLE:
                jj_consume_token(DOUBLE);
                break;
            case FLOTANTE:
                jj_consume_token(FLOTANTE);
                break;
            case BOOLEANO:
                jj_consume_token(BOOLEANO);
                break;
            case CARACTER:
                jj_consume_token(CARACTER);
                break;
            case NSSTRING:
                jj_consume_token(NSSTRING);
                break;
            case ARREGLO:
                jj_consume_token(ARREGLO);
                break;
            default:
                jj_la1[15] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /*  Gramática
     *   TIPO_RESULTADO  →   "void" | TIPO       */
    final public void tipoResultado() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VOID:
                jj_consume_token(VOID);
                break;
            case BYTE:
            case SHORT:
            case ENTERO:
            case LONG:
            case DOUBLE:
            case FLOTANTE:
            case BOOLEANO:
            case CARACTER:
            case NSSTRING:
            case ARREGLO:
                tipo();
                break;
            default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /*  Gramática
     *   EXPRESION   →   ASIGNACION | EXP_CONDICIONAL        */
    final public void expresion() throws ParseException {
        if (jj_2_2(2147483647)) {
            asignacion();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case OP_SUMA:
                case OP_RESTA:
                case COMPLEMENTO:
                case OP_NOT:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    expCondicional();
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*  Gramática
     *   ASIGNACION    →   EXP_PRIMARIA OP_ASIGNACION EXPRESION       */
    final public void asignacion() throws ParseException {
        expPrimaria();
        operadorAsignacion();
        expresion();
    }

    /*  Gramática
     *   OP_ASIGNACION  →    "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<="
     *                       ">>=" | "^=" | "|=" | "&="      */
    final public void operadorAsignacion() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_ASIG:
                jj_consume_token(OP_ASIG);
                break;
            case OP_ASIG_PRODUCTO:
                jj_consume_token(OP_ASIG_PRODUCTO);
                break;
            case OP_ASIG_COCIENTE:
                jj_consume_token(OP_ASIG_COCIENTE);
                break;
            case OP_ASIG_MODULO:
                jj_consume_token(OP_ASIG_MODULO);
                break;
            case OP_ASIG_SUMA:
                jj_consume_token(OP_ASIG_SUMA);
                break;
            case OP_ASIG_RESTA:
                jj_consume_token(OP_ASIG_RESTA);
                break;
            case OP_ASIG_SHIFT_LEFT:
                jj_consume_token(OP_ASIG_SHIFT_LEFT);
                break;
            case OP_ASIG_SHIFT_RIGTH:
                jj_consume_token(OP_ASIG_SHIFT_RIGTH);
                break;
            case OP_ASIG_XOR:
                jj_consume_token(OP_ASIG_XOR);
                break;
            case OP_ASIG_OR:
                jj_consume_token(OP_ASIG_OR);
                break;
            case OP_ASIG_AND:
                jj_consume_token(OP_ASIG_AND);
                break;
            default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

//Puede eliminarse
    final public void expCondicional() throws ParseException {
        expOrCond();
    }

    final public void expOrCond() throws ParseException {
        expAndCond();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_OR:
        ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_5;
            }
            jj_consume_token(OP_OR);
            expAndCond();
        }
    }

    final public void expAndCond() throws ParseException {
        expIor();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_AND:
        ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_6;
            }
            jj_consume_token(OP_AND);
            expIor();
        }
    }

    final public void expIor() throws ParseException {
        expXor();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_OR_BIT:
        ;
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    break label_7;
            }
            jj_consume_token(OP_OR_BIT);
            expXor();
        }
    }

    final public void expXor() throws ParseException {
        expAnd();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_XOR_BIT:
        ;
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_8;
            }
            jj_consume_token(OP_XOR_BIT);
            expAnd();
        }
    }

    final public void expAnd() throws ParseException {
        expIgualdad();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_AND_BIT:
        ;
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_9;
            }
            jj_consume_token(OP_AND_BIT);
            expIgualdad();
        }
    }

    final public void expIgualdad() throws ParseException {
        expRelacional();
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 82:
                case 83:
        ;
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    break label_10;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 82:
                    jj_consume_token(82);
                    break;
                case 83:
                    jj_consume_token(83);
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            expRelacional();
        }
    }

    final public void expRelacional() throws ParseException {
        expRecorrimiento();
        label_11:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 80:
                case 81:
                case 84:
                case 85:
        ;
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_11;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 80:
                    jj_consume_token(80);
                    break;
                case 81:
                    jj_consume_token(81);
                    break;
                case 84:
                    jj_consume_token(84);
                    break;
                case 85:
                    jj_consume_token(85);
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            expRecorrimiento();
        }
    }

    final public void expRecorrimiento() throws ParseException {
        expAdicion();
        label_12:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 86:
                case 87:
        ;
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    break label_12;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 86:
                    jj_consume_token(86);
                    break;
                case 87:
                    jj_consume_token(87);
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            expAdicion();
        }
    }

    final public void expAdicion() throws ParseException {
        expMultiplicacion();
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_SUMA:
                case OP_RESTA:
        ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_13;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_SUMA:
                    jj_consume_token(OP_SUMA);
                    break;
                case OP_RESTA:
                    jj_consume_token(OP_RESTA);
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            expMultiplicacion();
        }
    }

    final public void expMultiplicacion() throws ParseException {
        expUnaria();
        label_14:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_PRODUCTO:
                case OP_DIVISION:
                case 88:
        ;
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    break label_14;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_PRODUCTO:
                    jj_consume_token(OP_PRODUCTO);
                    break;
                case OP_DIVISION:
                    jj_consume_token(OP_DIVISION);
                    break;
                case 88:
                    jj_consume_token(88);
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            expUnaria();
        }
    }

    final public void expUnaria() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_SUMA:
            case OP_RESTA:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case OP_SUMA:
                        jj_consume_token(OP_SUMA);
                        break;
                    case OP_RESTA:
                        jj_consume_token(OP_RESTA);
                        break;
                    default:
                        jj_la1[34] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                expUnaria();
                break;
            case OP_INCREMENTO:
                expPreInc();
                break;
            case OP_DECREMENTO:
                expPreDec();
                break;
            case COMPLEMENTO:
            case OP_NOT:
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case PARENTESIS_APERTURA:
            case ID:
                expUnariaNoMasMenos();
                break;
            default:
                jj_la1[35] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void expPreInc() throws ParseException {
        jj_consume_token(OP_INCREMENTO);
        expPrimaria();
    }

    final public void expPreDec() throws ParseException {
        jj_consume_token(OP_DECREMENTO);
        expPrimaria();
    }

    final public void expUnariaNoMasMenos() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMPLEMENTO:
            case OP_NOT:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case COMPLEMENTO:
                        jj_consume_token(COMPLEMENTO);
                        break;
                    case OP_NOT:
                        jj_consume_token(OP_NOT);
                        break;
                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                expUnaria();
                break;
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case PARENTESIS_APERTURA:
            case ID:
                expPosfija();
                break;
            default:
                jj_la1[37] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void expPosfija() throws ParseException {
        expPrimaria();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_INCREMENTO:
            case OP_DECREMENTO:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case OP_INCREMENTO:
                        jj_consume_token(OP_INCREMENTO);
                        break;
                    case OP_DECREMENTO:
                        jj_consume_token(OP_DECREMENTO);
                        break;
                    default:
                        jj_la1[38] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[39] = jj_gen;
                ;
        }
    }

    final public void expPrimaria() throws ParseException {
        System.out.println("Gram\u00e1tica de expresi\u00f3n primaria");
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
                literal();
                break;
            default:
                jj_la1[40] = jj_gen;
                if (jj_2_3(2147483647)) {
                    llamadoFuncion();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ID:
                            jj_consume_token(ID);
                            break;
                        case PARENTESIS_APERTURA:
                            jj_consume_token(PARENTESIS_APERTURA);
                            expresion();
                            jj_consume_token(PARENTESIS_CERRADURA);
                            break;
                        default:
                            jj_la1[41] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
    }

    /*FIXME
     *
     */
    final public void literal() throws ParseException {
        System.out.println("Gram\u00e1tica de literal");
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LITERAL_ENTERA:
                jj_consume_token(LITERAL_ENTERA);
                break;
            case LITERAL_FLOTANTE:
                jj_consume_token(LITERAL_FLOTANTE);
                break;
            case LITERAL_CARACTER:
                jj_consume_token(LITERAL_CARACTER);
                break;
            case LITERAL_STRING:
                jj_consume_token(LITERAL_STRING);
                break;
            case LITERAL_STRING_OBJC:
                jj_consume_token(LITERAL_STRING_OBJC);
                break;
            case LITERAL_BOOLEANA:
                jj_consume_token(LITERAL_BOOLEANA);
                break;
            default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void llamadoFuncion() throws ParseException {
        System.out.println("Gram\u00e1tica de llamado de funci\u00f3n");
        jj_consume_token(ID);
        argumentos();
    }

    final public void argumentos() throws ParseException {
        jj_consume_token(PARENTESIS_APERTURA);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_INCREMENTO:
            case OP_DECREMENTO:
            case OP_SUMA:
            case OP_RESTA:
            case COMPLEMENTO:
            case OP_NOT:
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case PARENTESIS_APERTURA:
            case ID:
                expresion();
                label_15:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMA:
          ;
                            break;
                        default:
                            jj_la1[43] = jj_gen;
                            break label_15;
                    }
                    jj_consume_token(COMA);
                    expresion();
                }
                break;
            default:
                jj_la1[44] = jj_gen;
                ;
        }
        jj_consume_token(PARENTESIS_CERRADURA);
    }

    final public void sentencia() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LLAVE_APERTURA:
                bloque();
                break;
            case DELIMITADOR_INSTRUCCION:
                sentVacia();
                break;
            case OP_INCREMENTO:
            case OP_DECREMENTO:
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case PARENTESIS_APERTURA:
            case ID:
                sentExp();
                jj_consume_token(DELIMITADOR_INSTRUCCION);
                break;
            case SWITCH:
                sentSwitch();
                break;
            case IF:
                sentIf();
                break;
            case WHILE:
                sentWhile();
                break;
            case DO:
                sentDo();
                break;
            case FOR:
                sentFor();
                break;
            case BREAK:
                sentBreak();
                break;
            case CONTINUE:
                sentContinue();
                break;
            case RETURN:
                sentReturn();
                break;
            default:
                jj_la1[45] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void bloque() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {
            DELIMITADOR_INSTRUCCION, LLAVE_APERTURA, LLAVE_CERRADURA,
            BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE, DOUBLE, CARACTER,
            NSSTRING, ARREGLO,
            FOR, WHILE, IF, DO, SWITCH, BREAK, CONTINUE, RETURN,
            ID, OP_INCREMENTO, OP_DECREMENTO
        };
        try {
            jj_consume_token(LLAVE_APERTURA);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en bloque de sentencias ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
        label_16:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case FOR:
                case WHILE:
                case DO:
                case BREAK:
                case CONTINUE:
                case RETURN:
                case IF:
                case SWITCH:
                case DELIMITADOR_INSTRUCCION:
                case PARENTESIS_APERTURA:
                case LLAVE_APERTURA:
                case ID:
        ;
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    break label_16;
            }
            bloqueSent();
        }
        try {
            jj_consume_token(LLAVE_CERRADURA);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en bloque de sentencias ", ex.currentToken.next);
        }
    }

    final public void bloqueSent() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BYTE:
            case SHORT:
            case ENTERO:
            case LONG:
            case DOUBLE:
            case FLOTANTE:
            case BOOLEANO:
            case CARACTER:
            case NSSTRING:
            case ARREGLO:
                declVarLoc();
                jj_consume_token(DELIMITADOR_INSTRUCCION);
                break;
            case OP_INCREMENTO:
            case OP_DECREMENTO:
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case FOR:
            case WHILE:
            case DO:
            case BREAK:
            case CONTINUE:
            case RETURN:
            case IF:
            case SWITCH:
            case DELIMITADOR_INSTRUCCION:
            case PARENTESIS_APERTURA:
            case LLAVE_APERTURA:
            case ID:
                sentencia();
                break;
            default:
                jj_la1[47] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void declVarLoc() throws ParseException {
        tipo();
        jj_consume_token(ID);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_ASIG:
                jj_consume_token(OP_ASIG);
                expresion();
                break;
            default:
                jj_la1[48] = jj_gen;
                ;
        }
        label_17:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    break label_17;
            }
            jj_consume_token(COMA);
            jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_ASIG:
                    jj_consume_token(OP_ASIG);
                    expresion();
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    ;
            }
        }
    }

    final public void sentVacia() throws ParseException {
        jj_consume_token(DELIMITADOR_INSTRUCCION);
    }

    final public void sentExp() throws ParseException {
        System.out.println("Gram\u00e1tica de sentencia de expresi\u00f3n");
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_INCREMENTO:
                expPreInc();
                break;
            case OP_DECREMENTO:
                expPreDec();
                break;
            default:
                jj_la1[51] = jj_gen;
                if (jj_2_4(2147483647)) {
                    asignacion();
                } else if (jj_2_5(2147483647)) {
                    llamadoFuncion();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LITERAL_BOOLEANA:
                        case LITERAL_ENTERA:
                        case LITERAL_FLOTANTE:
                        case LITERAL_CARACTER:
                        case LITERAL_STRING:
                        case LITERAL_STRING_OBJC:
                        case PARENTESIS_APERTURA:
                        case ID:
                            expPosfija();
                            break;
                        default:
                            jj_la1[52] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
    }

    final public void sentSwitch() throws ParseException {
        int[] tokensIzquierda = {
            LLAVE_APERTURA
        };
        int[] tokensDerecha = {
            DELIMITADOR_INSTRUCCION, LLAVE_CERRADURA,
            BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE, DOUBLE, CARACTER,
            NSSTRING, ARREGLO,
            FOR, WHILE, IF, DO, SWITCH, BREAK, CONTINUE, RETURN,
            ID, OP_INCREMENTO, OP_DECREMENTO
        };
        try {
            jj_consume_token(SWITCH);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
            jj_consume_token(LLAVE_APERTURA);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia switch ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
        label_18:
        while (true) {
            if (jj_2_6(2147483647)) {
                ;
            } else {
                break label_18;
            }
            etiquetaSwitch();
            label_19:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case OP_INCREMENTO:
                    case OP_DECREMENTO:
                    case LITERAL_BOOLEANA:
                    case LITERAL_ENTERA:
                    case LITERAL_FLOTANTE:
                    case LITERAL_CARACTER:
                    case LITERAL_STRING:
                    case LITERAL_STRING_OBJC:
                    case BYTE:
                    case SHORT:
                    case ENTERO:
                    case LONG:
                    case DOUBLE:
                    case FLOTANTE:
                    case BOOLEANO:
                    case CARACTER:
                    case NSSTRING:
                    case ARREGLO:
                    case FOR:
                    case WHILE:
                    case DO:
                    case BREAK:
                    case CONTINUE:
                    case RETURN:
                    case IF:
                    case SWITCH:
                    case DELIMITADOR_INSTRUCCION:
                    case PARENTESIS_APERTURA:
                    case LLAVE_APERTURA:
                    case ID:
          ;
                        break;
                    default:
                        jj_la1[53] = jj_gen;
                        break label_19;
                }
                bloqueSent();
            }
        }
        try {
            jj_consume_token(LLAVE_CERRADURA);
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia switch ", ex.currentToken.next);
        }
    }

    final public void etiquetaSwitch() throws ParseException {
        int[] tokensIzquierda = {
            DOS_PUNTOS
        };
        int[] tokensDerecha = {
            DELIMITADOR_INSTRUCCION, LLAVE_CERRADURA,
            BOOLEANO, BYTE, SHORT, ENTERO, LONG, FLOTANTE, DOUBLE, CARACTER,
            NSSTRING, ARREGLO, LITERAL_ENTERA,
            FOR, WHILE, IF, DO, SWITCH, BREAK, CONTINUE, RETURN, CASE, DEFAULT,
            ID, OP_INCREMENTO, OP_DECREMENTO
        };
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CASE:
                    jj_consume_token(CASE);
                    expresion();
                    jj_consume_token(DOS_PUNTOS);
                    break;
                case PR_DEFAULT:
                    jj_consume_token(PR_DEFAULT);
                    jj_consume_token(DOS_PUNTOS);
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (ParseException ex) {
            registraErrorSintactico(
                    "Error de sintaxis en etiqueta de switch ", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

    final public void sentIf() throws ParseException {
        String mensajeError = "";
        if (jj_2_7(2147483647)) {
            jj_consume_token(IF);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
        } else if (jj_2_8(2147483647)) {
            jj_consume_token(IF);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct if EXPRESION ) \u005cn";
        } else if (jj_2_9(3)) {
            jj_consume_token(IF);
            jj_consume_token(PARENTESIS_APERTURA);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct if ( ) \u005cn";
        } else if (jj_2_10(2147483647)) {
            jj_consume_token(IF);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            mensajeError = "\u005ct\u005ct\u005ct if ( EXPRESION \u005cn";
        } else if (jj_2_11(2)) {
            jj_consume_token(IF);
            jj_consume_token(PARENTESIS_APERTURA);
            mensajeError = "\u005ct\u005ct\u005ct if ( \u005cn";
        } else if (jj_2_12(2)) {
            jj_consume_token(IF);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct if ) \u005cn";
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                    jj_consume_token(IF);
                    mensajeError = "\u005ct\u005ct\u005ct if  \u005cn";
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        sentencia();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSE:
                jj_consume_token(ELSE);
                sentencia();
                break;
            default:
                jj_la1[56] = jj_gen;
                ;
        }
        if (!mensajeError.isEmpty()) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia if\u005cn" + mensajeError, getToken(0));
        }
    }

    final public void sentWhile() throws ParseException {
        String mensajeError = "";
        if (jj_2_13(2147483647)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
            sentencia();
        } else if (jj_2_14(2147483647)) {
            jj_consume_token(WHILE);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while EXPRESION ) \u005cn";
        } else if (jj_2_15(3)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while ( ) \u005cn";
        } else if (jj_2_16(2147483647)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            mensajeError = "\u005ct\u005ct\u005ct while ( EXPRESION \u005cn";
        } else if (jj_2_17(2)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            mensajeError = "\u005ct\u005ct\u005ct while ( \u005cn";
        } else if (jj_2_18(2)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while ) \u005cn";
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHILE:
                    jj_consume_token(WHILE);
                    mensajeError = "\u005ct\u005ct\u005ct while  \u005cn";
                    break;
                default:
                    jj_la1[57] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        if (!mensajeError.isEmpty()) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia while\u005cn" + mensajeError, getToken(0));
        }
    }

    final public void sentDo() throws ParseException {
        String mensajeError = "";
        jj_consume_token(DO);
        sentencia();
        if (jj_2_19(2147483647)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
        } else if (jj_2_20(2147483647)) {
            jj_consume_token(WHILE);
            expresion();
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while EXPRESION ) \u005cn";
        } else if (jj_2_21(3)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while ( ) \u005cn";
        } else if (jj_2_22(2147483647)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            expresion();
            mensajeError = "\u005ct\u005ct\u005ct while ( EXPRESION \u005cn";
        } else if (jj_2_23(2)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_APERTURA);
            mensajeError = "\u005ct\u005ct\u005ct while ( \u005cn";
        } else if (jj_2_24(2)) {
            jj_consume_token(WHILE);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct while ) \u005cn";
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHILE:
                    jj_consume_token(WHILE);
                    mensajeError = "\u005ct\u005ct\u005ct while  \u005cn";
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(DELIMITADOR_INSTRUCCION);
        if (!mensajeError.isEmpty()) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia do - while\u005cn" + mensajeError, getToken(0));
        }
    }

    final public void sentFor() throws ParseException {
        String mensajeError = "";
        if (jj_2_25(2147483647)) {
            jj_consume_token(FOR);
            jj_consume_token(PARENTESIS_APERTURA);
            cuerpoFor();
            jj_consume_token(PARENTESIS_CERRADURA);
        } else if (jj_2_26(2147483647)) {
            jj_consume_token(FOR);
            cuerpoFor();
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct for ) \u005cn";
        } else if (jj_2_27(2147483647)) {
            jj_consume_token(FOR);
            jj_consume_token(PARENTESIS_APERTURA);
            cuerpoFor();
            mensajeError = "\u005ct\u005ct\u005ct for (  \u005cn";
        } else if (jj_2_28(2147483647)) {
            jj_consume_token(FOR);
            jj_consume_token(PARENTESIS_APERTURA);
            jj_consume_token(PARENTESIS_CERRADURA);
            mensajeError = "\u005ct\u005ct\u005ct for ( ) \u005cn";
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FOR:
                    jj_consume_token(FOR);
                    mensajeError = "\u005ct\u005ct\u005ct for ___ \u005cn";
                    break;
                default:
                    jj_la1[59] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        sentencia();
        if (!mensajeError.isEmpty()) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia for\u005cn" + mensajeError, getToken(0));
        }
    }

    final public void cuerpoFor() throws ParseException {
        String mensajeError = "";
        if (jj_2_29(2147483647)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case PARENTESIS_APERTURA:
                case ID:
                    forInit();
                    break;
                default:
                    jj_la1[60] = jj_gen;
                    ;
            }
            jj_consume_token(DELIMITADOR_INSTRUCCION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case OP_SUMA:
                case OP_RESTA:
                case COMPLEMENTO:
                case OP_NOT:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    expresion();
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    ;
            }
            jj_consume_token(DELIMITADOR_INSTRUCCION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    forAct();
                    break;
                default:
                    jj_la1[62] = jj_gen;
                    ;
            }
        } else if (jj_2_30(2147483647)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case PARENTESIS_APERTURA:
                case ID:
                    forInit();
                    break;
                default:
                    jj_la1[63] = jj_gen;
                    ;
            }
            jj_consume_token(DELIMITADOR_INSTRUCCION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case OP_SUMA:
                case OP_RESTA:
                case COMPLEMENTO:
                case OP_NOT:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    expresion();
                    break;
                default:
                    jj_la1[64] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    forAct();
                    break;
                default:
                    jj_la1[65] = jj_gen;
                    ;
            }
            mensajeError = "\u005ct\u005ct\u005ct EXPRESION ; EXPRESION _ EXPRESION \u005cn";
        } else if (jj_2_31(2147483647)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case PARENTESIS_APERTURA:
                case ID:
                    forInit();
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case OP_SUMA:
                case OP_RESTA:
                case COMPLEMENTO:
                case OP_NOT:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    expresion();
                    break;
                default:
                    jj_la1[67] = jj_gen;
                    ;
            }
            jj_consume_token(DELIMITADOR_INSTRUCCION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    forAct();
                    break;
                default:
                    jj_la1[68] = jj_gen;
                    ;
            }
            mensajeError = "\u005ct\u005ct\u005ct EXPRESION _ EXPRESION ; EXPRESION \u005cn";
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case BYTE:
                case SHORT:
                case ENTERO:
                case LONG:
                case DOUBLE:
                case FLOTANTE:
                case BOOLEANO:
                case CARACTER:
                case NSSTRING:
                case ARREGLO:
                case PARENTESIS_APERTURA:
                case ID:
                    forInit();
                    break;
                default:
                    jj_la1[69] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case OP_SUMA:
                case OP_RESTA:
                case COMPLEMENTO:
                case OP_NOT:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    expresion();
                    break;
                default:
                    jj_la1[70] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    forAct();
                    break;
                default:
                    jj_la1[71] = jj_gen;
                    ;
            }
            mensajeError = "\u005ct\u005ct\u005ct EXPRESION _ EXPRESION _ EXPRESION \u005cn";
        }
        if (!mensajeError.isEmpty()) {
            registraErrorSintactico(
                    "Error de sintaxis en sentencia for\u005cn" + mensajeError, getToken(0));
        }
    }

    final public void forInit() throws ParseException {
        if (jj_2_32(2147483647)) {
            declVarLoc();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OP_INCREMENTO:
                case OP_DECREMENTO:
                case LITERAL_BOOLEANA:
                case LITERAL_ENTERA:
                case LITERAL_FLOTANTE:
                case LITERAL_CARACTER:
                case LITERAL_STRING:
                case LITERAL_STRING_OBJC:
                case PARENTESIS_APERTURA:
                case ID:
                    listaSentExp();
                    break;
                default:
                    jj_la1[72] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void listaSentExp() throws ParseException {
        sentExp();
        label_20:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[73] = jj_gen;
                    break label_20;
            }
            jj_consume_token(COMA);
            sentExp();
        }
    }

    final public void forAct() throws ParseException {
        listaSentExp();
    }

    final public void sentBreak() throws ParseException {
        jj_consume_token(BREAK);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                jj_consume_token(ID);
                break;
            default:
                jj_la1[74] = jj_gen;
                ;
        }
        jj_consume_token(DELIMITADOR_INSTRUCCION);
    }

    final public void sentContinue() throws ParseException {
        jj_consume_token(CONTINUE);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                jj_consume_token(ID);
                break;
            default:
                jj_la1[75] = jj_gen;
                ;
        }
        jj_consume_token(DELIMITADOR_INSTRUCCION);
    }

    final public void sentReturn() throws ParseException {
        jj_consume_token(RETURN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OP_INCREMENTO:
            case OP_DECREMENTO:
            case OP_SUMA:
            case OP_RESTA:
            case COMPLEMENTO:
            case OP_NOT:
            case LITERAL_BOOLEANA:
            case LITERAL_ENTERA:
            case LITERAL_FLOTANTE:
            case LITERAL_CARACTER:
            case LITERAL_STRING:
            case LITERAL_STRING_OBJC:
            case PARENTESIS_APERTURA:
            case ID:
                expresion();
                break;
            default:
                jj_la1[76] = jj_gen;
                ;
        }
        jj_consume_token(DELIMITADOR_INSTRUCCION);
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_3R_79() {
        if (jj_3R_25()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_89()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_79()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_scan_token(ID)) {
            return true;
        }
        if (jj_3R_74()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_scan_token(ID)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_47() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(26)) {
            jj_scanpos = xsp;
            if (jj_scan_token(30)) {
                jj_scanpos = xsp;
                if (jj_scan_token(32)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(33)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(34)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(25)) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_98() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(1)) {
            jj_scanpos = xsp;
            if (jj_scan_token(2)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_56()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45()) {
                jj_scanpos = xsp;
                if (jj_scan_token(69)) {
                    jj_scanpos = xsp;
                    if (jj_3R_46()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_3R_22()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_98()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_119() {
        if (jj_3R_95()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_118() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) {
            jj_scanpos = xsp;
            if (jj_scan_token(10)) {
                return true;
            }
        }
        if (jj_3R_111()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_117() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_118()) {
            jj_scanpos = xsp;
            if (jj_3R_119()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_110() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(3)) {
            jj_scanpos = xsp;
            if (jj_scan_token(4)) {
                return true;
            }
        }
        if (jj_3R_109()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_94() {
        if (jj_scan_token(OP_DECREMENTO)) {
            return true;
        }
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_112() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(5)) {
            jj_scanpos = xsp;
            if (jj_scan_token(6)) {
                jj_scanpos = xsp;
                if (jj_scan_token(88)) {
                    return true;
                }
            }
        }
        if (jj_3R_111()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_scan_token(OP_INCREMENTO)) {
            return true;
        }
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_106() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(80)) {
            jj_scanpos = xsp;
            if (jj_scan_token(81)) {
                jj_scanpos = xsp;
                if (jj_scan_token(84)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(85)) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_105()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_116() {
        if (jj_3R_117()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_115() {
        if (jj_3R_94()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_108() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(86)) {
            jj_scanpos = xsp;
            if (jj_scan_token(87)) {
                return true;
            }
        }
        if (jj_3R_107()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_114() {
        if (jj_3R_93()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_111() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_113()) {
            jj_scanpos = xsp;
            if (jj_3R_114()) {
                jj_scanpos = xsp;
                if (jj_3R_115()) {
                    jj_scanpos = xsp;
                    if (jj_3R_116()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_113() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(3)) {
            jj_scanpos = xsp;
            if (jj_scan_token(4)) {
                return true;
            }
        }
        if (jj_3R_111()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_3R_58()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_104() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(82)) {
            jj_scanpos = xsp;
            if (jj_scan_token(83)) {
                return true;
            }
        }
        if (jj_3R_103()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_109() {
        if (jj_3R_111()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_112()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_102() {
        if (jj_scan_token(OP_AND_BIT)) {
            return true;
        }
        if (jj_3R_101()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_107() {
        if (jj_3R_109()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_110()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_3R_107()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_108()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_103() {
        if (jj_3R_105()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_106()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_100() {
        if (jj_scan_token(OP_XOR_BIT)) {
            return true;
        }
        if (jj_3R_99()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_101() {
        if (jj_3R_103()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_104()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_97() {
        if (jj_scan_token(OP_OR_BIT)) {
            return true;
        }
        if (jj_3R_96()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_99() {
        if (jj_3R_101()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_102()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_scan_token(OP_OR)) {
            return true;
        }
        if (jj_3R_80()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_scan_token(OP_AND)) {
            return true;
        }
        if (jj_3R_90()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_96() {
        if (jj_3R_99()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_100()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_90() {
        if (jj_3R_96()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_97()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_90()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_91()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_3R_80()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_81()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_3R_75()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_23() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
            if (jj_scan_token(17)) {
                jj_scanpos = xsp;
                if (jj_scan_token(18)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(19)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(15)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(16)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(20)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(21)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(22)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(23)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(24)) {
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_22()) {
            return true;
        }
        if (jj_3R_23()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_3R_73()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_22()) {
            return true;
        }
        if (jj_3R_23()) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_3R_57()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_25() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_48()) {
            jj_scanpos = xsp;
            if (jj_3R_49()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(35)) {
            jj_scanpos = xsp;
            if (jj_scan_token(36)) {
                jj_scanpos = xsp;
                if (jj_scan_token(37)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(38)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(39)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(40)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(41)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(42)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(43)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(44)) {
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_32() {
        if (jj_3R_39()) {
            return true;
        }
        if (jj_scan_token(ID)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_3R_73()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_77()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_78()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_54() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_71()) {
            jj_scanpos = xsp;
            if (jj_3R_72()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_3R_76()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_31() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_36()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_37()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_30() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_33()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_34()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_35()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_29() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_30()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_31()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_32()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_53() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_68()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_69()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_70()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_54()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_52() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_65()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_66()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_67()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_51() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_62()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_63()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_64()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_50() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_59()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_60()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_61()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_29() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_50()) {
            jj_scanpos = xsp;
            if (jj_3R_51()) {
                jj_scanpos = xsp;
                if (jj_3R_52()) {
                    jj_scanpos = xsp;
                    if (jj_3R_53()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_28() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_27() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_29()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_26() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (jj_3R_29()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_25() {
        if (jj_scan_token(FOR)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_29()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(OP_ASIG)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_22() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(69)) {
            jj_scanpos = xsp;
            if (jj_3R_28()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_20() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(CORCHETE_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_23() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(CORCHETE_APERTURA)) {
            return true;
        }
        if (jj_scan_token(CORCHETE_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_16() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(69)) {
            jj_scanpos = xsp;
            if (jj_3R_27()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_14() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_13() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_18() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_39()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_40()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(ID)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_41()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_42()) {
            jj_scanpos = xsp;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_43()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(DELIMITADOR_INSTRUCCION)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_17() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(69)) {
            jj_scanpos = xsp;
            if (jj_3R_26()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_12() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_47()) {
            return true;
        }
        if (jj_scan_token(DOS_PUNTOS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(IF)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_CERRADURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_21()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(60)) {
            jj_scanpos = xsp;
            if (jj_scan_token(56)) {
                jj_scanpos = xsp;
                if (jj_scan_token(57)) {
                    jj_scanpos = xsp;
                    if (jj_3R_24()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_scan_token(OP_ASIG)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        if (jj_scan_token(ID)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_92()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_scan_token(ID)) {
            return true;
        }
        if (jj_scan_token(PARENTESIS_APERTURA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(ID)) {
            return true;
        }
        if (jj_3R_23()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_88() {
        if (jj_3R_95()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_3R_56()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_scan_token(OP_ASIG)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_3R_57()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_3R_94()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_84()) {
            jj_scanpos = xsp;
            if (jj_3R_85()) {
                jj_scanpos = xsp;
                if (jj_3R_86()) {
                    jj_scanpos = xsp;
                    if (jj_3R_87()) {
                        jj_scanpos = xsp;
                        if (jj_3R_88()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_3R_93()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_3R_39()) {
            return true;
        }
        if (jj_scan_token(ID)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_82()) {
            jj_scanpos = xsp;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_83()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_89() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public CompiladorTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[77];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4600049e, 0x1ffc000, 0x200, 0x100, 0x800, 0x2000, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x60, 0x60, 0x18, 0x4600049e, 0x480, 0x46000480, 0x6, 0x6, 0x46000000, 0x0, 0x46000000, 0x0, 0x4600049e, 0x46000006, 0x46000006, 0x46000006, 0x4000, 0x0, 0x4000, 0x6, 0x46000000, 0x46000006, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46000006, 0x4600049e, 0x46000006, 0x46000006, 0x4600049e, 0x46000006, 0x46000006, 0x4600049e, 0x46000006, 0x46000006, 0x4600049e, 0x46000006, 0x46000006, 0x0, 0x0, 0x0, 0x4600049e,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x4000000, 0x3ff8, 0x3ff8, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x8000000, 0x20000000, 0x5ff8, 0x4000, 0x0, 0x0, 0x1ff8, 0x3ff8, 0x40000007, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000007, 0x0, 0x40000007, 0x0, 0x0, 0x7, 0x40000000, 0x7, 0x20000000, 0x40000007, 0x48bf8007, 0x48bf9fff, 0x48bf9fff, 0x0, 0x20000000, 0x0, 0x0, 0x40000007, 0x48bf9fff, 0x3000000, 0x200000, 0x400000, 0x10000, 0x10000, 0x8000, 0x40001fff, 0x40000007, 0x40000007, 0x40001fff, 0x40000007, 0x40000007, 0x40001fff, 0x40000007, 0x40000007, 0x40001fff, 0x40000007, 0x40000007, 0x40000007, 0x20000000, 0x0, 0x0, 0x40000007,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x10010, 0x4, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0000, 0xc0000, 0x330000, 0x330000, 0xc00000, 0xc00000, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x20, 0x21, 0x21, 0x21, 0x0, 0x0, 0x0, 0x0, 0x20, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x20, 0x20, 0x20,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[32];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public Compilador(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Compilador(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CompiladorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public Compilador(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CompiladorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Compilador(CompiladorTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CompiladorTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 77; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                exists = true;
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) {
                        break;
                    }
                }
            }
            if (!exists) {
                jj_expentries.add(jj_expentry);
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[89];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 77; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 89; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 32; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
