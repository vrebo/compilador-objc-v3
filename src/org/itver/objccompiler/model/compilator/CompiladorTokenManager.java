/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */
package org.itver.objccompiler.model.compilator;

/** Token Manager. */
public class CompiladorTokenManager implements CompiladorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ff66f800000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 51;
         }
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 3;
         }
         if ((active0 & 0x40040L) != 0L || (active1 & 0x2000L) != 0L)
            return 52;
         if ((active1 & 0x10L) != 0L)
            return 74;
         if ((active0 & 0x810000000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x22008000000000L) != 0L)
            return 51;
         if ((active0 & 0x3ddff7800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 1;
            }
            return 51;
         }
         return -1;
      case 2:
         if ((active0 & 0x802000000000L) != 0L)
            return 51;
         if ((active0 & 0x3dd7fd800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 51;
         }
         return -1;
      case 3:
         if ((active0 & 0x29d599000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 51;
         }
         if ((active0 & 0x140264800000000L) != 0L)
            return 51;
         return -1;
      case 4:
         if ((active0 & 0x5411000000000L) != 0L)
            return 51;
         if ((active0 & 0x298188000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 51;
         }
         return -1;
      case 5:
         if ((active0 & 0x90008000000000L) != 0L)
            return 51;
         if ((active0 & 0x208180000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 51;
         }
         return -1;
      case 6:
         if ((active0 & 0x8080000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
            return 51;
         }
         if ((active0 & 0x200100000000000L) != 0L)
            return 51;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 34:
         return jjStartNfaWithStates_0(0, 68, 74);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 38:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x1000100L, 0x0L);
      case 40:
         return jjStopAtPos(0, 62);
      case 41:
         return jjStopAtPos(0, 63);
      case 42:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 43:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x8002L, 0x0L);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x10004L, 0x0L);
      case 47:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x2000L);
      case 58:
         return jjStopAtPos(0, 60);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x500000L);
      case 61:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0xa00000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 66);
      case 93:
         return jjStopAtPos(0, 67);
      case 94:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x108440000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x202008000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x810000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20002000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80001000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 64);
      case 124:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x800200L, 0x0L);
      case 125:
         return jjStopAtPos(0, 65);
      case 126:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 42:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 43:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 45:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 60:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 62:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x210000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 51);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1041000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8e0c000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x81200000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8404000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x11000000000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 51);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000800000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 51);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x204010000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 51);
         break;
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 51);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 51);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 51);
         break;
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 51);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x88080000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 107:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 51);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10180000000000L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 51);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 51);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 51);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 51);
         break;
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 51);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 58);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 51);
         break;
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 36)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(51);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 11:
               case 51:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 3:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 74:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 34)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(15, 17);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 24);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if (curChar == 34 && kind > 33)
                     kind = 33;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 42:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 45:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 48:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 50:
                  if (curChar != 36)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if (curChar != 47)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar != 46)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(29, 31);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(29, 31);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddTwoStates(61, 21);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddTwoStates(65, 21);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 21);
                  break;
               case 70:
                  if (curChar != 48)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(12, 14);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(72, 15);
                  break;
               case 73:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(73, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(51);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(51);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(51);
                  }
                  if (curChar == 79)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 74:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 0:
                  if (curChar == 83 && kind > 25)
                     kind = 25;
                  break;
               case 1:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 101 && kind > 25)
                     kind = 25;
                  break;
               case 6:
                  if (curChar == 117)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 43:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 53:
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 71:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(72, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 11:
               case 51:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(51);
                  break;
               case 74:
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 53:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x4000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   56, 57, 62, 63, 66, 67, 21, 32, 33, 35, 23, 25, 71, 73, 15, 17, 
   18, 21, 32, 33, 37, 35, 42, 43, 45, 42, 43, 47, 45, 58, 59, 21, 
   66, 67, 21, 34, 36, 38, 19, 20, 26, 27, 29, 44, 46, 48, 60, 61, 
   64, 65, 68, 69, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\176", "\46\46", 
"\174\174", "\41", "\174", "\46", "\136", "\75", "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", "\74\74\75", "\76\76\75", "\136\75", "\174\75", "\46\75", null, null, null, 
null, null, null, null, null, null, null, "\142\171\164\145", 
"\163\150\157\162\164", "\151\156\164", "\154\157\156\147", "\144\157\165\142\154\145", 
"\146\154\157\141\164", "\102\117\117\114", "\143\150\141\162", "\116\123\123\164\162\151\156\147", 
"\116\123\101\162\162\141\171", "\166\157\151\144", "\143\157\156\163\164", "\146\157\162", 
"\167\150\151\154\145", "\144\157", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\162\145\164\165\162\156", "\151\146", "\145\154\163\145", "\163\167\151\164\143\150", 
"\143\141\163\145", "\144\145\146\141\165\154\164", "\43\151\155\160\157\162\164", "\73", "\72", 
"\54", "\50", "\51", "\173", "\175", "\133", "\135", "\42", null, null, null, null, 
null, null, null, null, null, null, null, "\74", "\76", "\75\75", "\41\75", 
"\74\75", "\76\75", "\74\74", "\76\76", "\45", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "DENTRO_COMENTARIO",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffff47ffffffL, 0x1ff003fL, 
};
static final long[] jjtoSkip = {
   0x0L, 0xff00L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[74];
private final int[] jjstateSet = new int[148];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 74; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 79)
       {
          jjmatchedKind = 79;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
        Compilador.registraLogLexico("Token: Operador de incremento " + image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
        Compilador.registraLogLexico("Token: Operador de decremento " + image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
        Compilador.registraLogLexico("Token: Operador de adici\u00f3n " + image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
        Compilador.registraLogLexico("Token: Operador de sustracci\u00f3n " + image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
        Compilador.registraLogLexico("Token: Operador de producto " + image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
        Compilador.registraLogLexico("Token: Operador de cociente " + image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
        Compilador.registraLogLexico("Token: Operador de complemento a 2 " + image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
        Compilador.registraLogLexico("Token: Operador AND l\u00f3gico " + image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
        Compilador.registraLogLexico("Token: Operador OR l\u00f3gico " + image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
        Compilador.registraLogLexico("Token: Operador NOT l\u00f3gico " + image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
        Compilador.registraLogLexico("Token: Operador OR a nivel de bits " + image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
        Compilador.registraLogLexico("Token: Operador AND a nivel de bits " + image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
        Compilador.registraLogLexico("Token: Operador XOR a nivel de bits " + image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
        Compilador.registraLogLexico("Token: Operador de asignaci\u00f3n " + image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con adici\u00f3n " + image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con sustracci\u00f3n " + image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con producto " + image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con cociente " + image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con modulo " + image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con recorrimiento a la izquierda " + image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con recorrimiento a la derecha " + image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con operaci\u00f3n XOR a nivel de bits " + image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con operaci\u00f3n OR a nivel de bits " + image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
        Compilador.registraLogLexico("Token: Operador de asignacion con operaci\u00f3n AND a nivel de bits " + image);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal booleana: " + image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal entera: " + image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal flotante : " + image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal caracter: " + image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal string: " + image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Literal string de objective c: " + image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
        Compilador.registraLogLexico("Token: Palabra reservada de tipo de dato primitivo " + image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
        Compilador.registraLogLexico("Token: Palabra reservada " + image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
        Compilador.registraLogLexico("Token: Directiva de importaci\u00f3n " + image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
        Compilador.registraLogLexico("Token: Delimitador de instrucci\u00f3n " + image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
        Compilador.registraLogLexico("Token: Dos puntos " + image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
        Compilador.registraLogLexico("Token: Coma " + image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
        Compilador.registraLogLexico("Token: Parentes\u00eds de apertura " + image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
        Compilador.registraLogLexico("Token: Parentes\u00eds de cerradura " + image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
        Compilador.registraLogLexico("Token: Llave de apertura " + image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
        Compilador.registraLogLexico("Token: Llave de cerradura " + image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
        Compilador.registraLogLexico("Token: Corchete de apertura " + image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
        Compilador.registraLogLexico("Token: Corchete de cerradura " + image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
        Compilador.registraLogLexico("Token: Comilla doble " + image);
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Compilador.registraLogLexico("Token: Identificador " + image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
